// <auto-generated />
using System;
using Kanstraction.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Kanstraction.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250924171000_AddBuildingTypeMaterialUsages")]
    partial class AddBuildingTypeMaterialUsages
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.8");

            modelBuilder.Entity("Kanstraction.Entities.Building", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BuildingTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BuildingTypeId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Buildings");
                });

            modelBuilder.Entity("Kanstraction.Entities.BuildingType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("BuildingTypes");
                });

            modelBuilder.Entity("Kanstraction.Entities.BuildingTypeStagePreset", b =>
                {
                    b.Property<int>("BuildingTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StagePresetId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("INTEGER");

                    b.HasKey("BuildingTypeId", "StagePresetId");

                    b.HasIndex("StagePresetId");

                    b.ToTable("BuildingTypeStagePresets");
                });

            modelBuilder.Entity("Kanstraction.Entities.BuildingTypeSubStageLabor", b =>
                {
                    b.Property<int>("BuildingTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SubStagePresetId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("LaborCost")
                        .HasColumnType("TEXT");

                    b.HasKey("BuildingTypeId", "SubStagePresetId");

                    b.HasIndex("SubStagePresetId");

                    b.ToTable("BuildingTypeSubStageLabors");
                });

            modelBuilder.Entity("Kanstraction.Entities.BuildingTypeMaterialUsage", b =>
                {
                    b.Property<int>("BuildingTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SubStagePresetId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaterialId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Qty")
                        .HasColumnType("TEXT");

                    b.HasKey("BuildingTypeId", "SubStagePresetId", "MaterialId");

                    b.HasIndex("SubStagePresetId");

                    b.ToTable("BuildingTypeMaterialUsages");
                });

            modelBuilder.Entity("Kanstraction.Entities.Material", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EffectiveSince")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PricePerUnit")
                        .HasColumnType("TEXT");

                    b.Property<int>("MaterialCategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MaterialCategoryId");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("Kanstraction.Entities.MaterialCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("MaterialCategories");
                });

            modelBuilder.Entity("Kanstraction.Entities.MaterialPriceHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("MaterialId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("PricePerUnit")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MaterialId");

                    b.ToTable("MaterialPriceHistory");
                });

            modelBuilder.Entity("Kanstraction.Entities.MaterialUsage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaterialId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Qty")
                        .HasColumnType("TEXT");

                    b.Property<int>("SubStageId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UsageDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MaterialId");

                    b.HasIndex("SubStageId", "UsageDate");

                    b.ToTable("MaterialUsages");
                });

            modelBuilder.Entity("Kanstraction.Entities.MaterialUsagePreset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaterialId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Qty")
                        .HasColumnType("TEXT");

                    b.Property<int>("SubStagePresetId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MaterialId");

                    b.HasIndex("SubStagePresetId");

                    b.ToTable("MaterialUsagesPreset");
                });

            modelBuilder.Entity("Kanstraction.Entities.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Kanstraction.Entities.Stage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BuildingId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId", "OrderIndex");

                    b.ToTable("Stages");
                });

            modelBuilder.Entity("Kanstraction.Entities.StagePreset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("StagePresets");
                });

            modelBuilder.Entity("Kanstraction.Entities.SubStage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("LaborCost")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StageId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("StageId", "OrderIndex");

                    b.ToTable("SubStages");
                });

            modelBuilder.Entity("Kanstraction.Entities.SubStagePreset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("LaborCost")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StagePresetId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("StagePresetId");

                    b.ToTable("SubStagePresets");
                });

            modelBuilder.Entity("Kanstraction.Entities.Building", b =>
                {
                    b.HasOne("Kanstraction.Entities.BuildingType", "BuildingType")
                        .WithMany()
                        .HasForeignKey("BuildingTypeId");

                    b.HasOne("Kanstraction.Entities.Project", "Project")
                        .WithMany("Buildings")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BuildingType");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Kanstraction.Entities.BuildingTypeStagePreset", b =>
                {
                    b.HasOne("Kanstraction.Entities.BuildingType", "BuildingType")
                        .WithMany()
                        .HasForeignKey("BuildingTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kanstraction.Entities.StagePreset", "StagePreset")
                        .WithMany()
                        .HasForeignKey("StagePresetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BuildingType");

                    b.Navigation("StagePreset");
                });

            modelBuilder.Entity("Kanstraction.Entities.BuildingTypeSubStageLabor", b =>
                {
                    b.HasOne("Kanstraction.Entities.BuildingType", "BuildingType")
                        .WithMany()
                        .HasForeignKey("BuildingTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kanstraction.Entities.SubStagePreset", "SubStagePreset")
                        .WithMany()
                        .HasForeignKey("SubStagePresetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BuildingType");

                    b.Navigation("SubStagePreset");
                });

            modelBuilder.Entity("Kanstraction.Entities.BuildingTypeMaterialUsage", b =>
                {
                    b.HasOne("Kanstraction.Entities.BuildingType", "BuildingType")
                        .WithMany()
                        .HasForeignKey("BuildingTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kanstraction.Entities.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kanstraction.Entities.SubStagePreset", "SubStagePreset")
                        .WithMany()
                        .HasForeignKey("SubStagePresetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BuildingType");

                    b.Navigation("Material");

                    b.Navigation("SubStagePreset");
                });

            modelBuilder.Entity("Kanstraction.Entities.MaterialPriceHistory", b =>
                {
                    b.HasOne("Kanstraction.Entities.Material", "Material")
                        .WithMany("PriceHistory")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Material");
                });

            modelBuilder.Entity("Kanstraction.Entities.MaterialUsage", b =>
                {
                    b.HasOne("Kanstraction.Entities.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kanstraction.Entities.SubStage", "SubStage")
                        .WithMany("MaterialUsages")
                        .HasForeignKey("SubStageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Material");

                    b.Navigation("SubStage");
                });

            modelBuilder.Entity("Kanstraction.Entities.MaterialUsagePreset", b =>
                {
                    b.HasOne("Kanstraction.Entities.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kanstraction.Entities.SubStagePreset", "SubStagePreset")
                        .WithMany()
                        .HasForeignKey("SubStagePresetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Material");

                    b.Navigation("SubStagePreset");
                });

            modelBuilder.Entity("Kanstraction.Entities.Stage", b =>
                {
                    b.HasOne("Kanstraction.Entities.Building", "Building")
                        .WithMany("Stages")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");
                });

            modelBuilder.Entity("Kanstraction.Entities.SubStage", b =>
                {
                    b.HasOne("Kanstraction.Entities.Stage", "Stage")
                        .WithMany("SubStages")
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stage");
                });

            modelBuilder.Entity("Kanstraction.Entities.SubStagePreset", b =>
                {
                    b.HasOne("Kanstraction.Entities.StagePreset", "StagePreset")
                        .WithMany("SubStages")
                        .HasForeignKey("StagePresetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StagePreset");
                });

            modelBuilder.Entity("Kanstraction.Entities.Building", b =>
                {
                    b.Navigation("Stages");
                });

            modelBuilder.Entity("Kanstraction.Entities.Material", b =>
                {
                    b.HasOne("Kanstraction.Entities.MaterialCategory", "MaterialCategory")
                        .WithMany("Materials")
                        .HasForeignKey("MaterialCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MaterialCategory");

                    b.Navigation("PriceHistory");
                });

            modelBuilder.Entity("Kanstraction.Entities.MaterialCategory", b =>
                {
                    b.Navigation("Materials");
                });

            modelBuilder.Entity("Kanstraction.Entities.Project", b =>
                {
                    b.Navigation("Buildings");
                });

            modelBuilder.Entity("Kanstraction.Entities.Stage", b =>
                {
                    b.Navigation("SubStages");
                });

            modelBuilder.Entity("Kanstraction.Entities.StagePreset", b =>
                {
                    b.Navigation("SubStages");
                });

            modelBuilder.Entity("Kanstraction.Entities.SubStage", b =>
                {
                    b.Navigation("MaterialUsages");
                });
#pragma warning restore 612, 618
        }
    }
}
